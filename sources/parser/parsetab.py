
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programleftADDSUBleftMULDIVrightPLUSrightMINUSDECIMAL_CONSTANT DOUBLE_TYPE FLOAT_TYPE IDENTIFIER_TOKEN INTEGRAL_CONSTANT INT_TYPE SHORT_TYPE program : statements  statements : statements empty_statement\n                   | statements declaration_statement\n                   | statements assignment_statement  statements : empty_statement\n                   | declaration_statement\n                   | assignment_statement  statements : statements error ';'  statements : error ';'  assignment_statement : variable_usage '=' arithmetic_expression ';'\n                             | array_usage '=' arithmetic_expression ';'  assignment_statement : error '=' arithmetic_expression ';'\n                             | variable_usage '=' error ';'\n                             | array_usage '=' error ';'\n                             | error '=' error ';'  arithmetic_expression : '(' arithmetic_expression ')'  arithmetic_expression : '-' arithmetic_expression %prec MINUS\n                              | '+' arithmetic_expression %prec PLUS  arithmetic_expression : arithmetic_expression '+' arithmetic_expression %prec ADD\n                              | arithmetic_expression '-' arithmetic_expression %prec SUB\n                              | arithmetic_expression '*' arithmetic_expression %prec MUL\n                              | arithmetic_expression '/' arithmetic_expression %prec DIV  arithmetic_expression : numeric_constant\n                              | function_call\n                              | variable_usage\n                              | array_usage  function_call : function_name '(' arithmetic_expression ')'  function_name : IDENTIFIER_TOKEN  variable_usage : IDENTIFIER_TOKEN  array_usage : IDENTIFIER_TOKEN '[' arithmetic_expression ']'  numeric_constant : INTEGRAL_CONSTANT  numeric_constant : DECIMAL_CONSTANT  declaration_statement : declaration_type declaration_list ';'  declaration_statement : declaration_type error ';'  declaration_type : FLOAT_TYPE\n                         | DOUBLE_TYPE\n                         | SHORT_TYPE\n                         | INT_TYPE  declaration_list : declaration_list ',' IDENTIFIER_TOKEN  declaration_list : declaration_list ',' IDENTIFIER_TOKEN '[' INTEGRAL_CONSTANT ']'  declaration_list : IDENTIFIER_TOKEN  declaration_list : IDENTIFIER_TOKEN '[' INTEGRAL_CONSTANT ']'  empty_statement : epsilon ';'  epsilon : "
    
_lr_action_items = {'error':([0,2,3,4,5,8,11,12,13,14,16,17,18,20,21,22,26,27,29,43,45,52,53,64,65,66,67,],[6,19,-5,-6,-7,24,-35,-36,-37,-38,-2,-3,-4,-9,30,-43,48,50,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),';':([0,2,3,4,5,6,7,16,17,18,19,20,22,23,24,25,29,30,31,35,36,37,38,39,40,42,43,45,47,48,49,50,52,53,59,60,62,64,65,66,67,68,69,70,71,72,73,76,77,79,],[-44,-44,-5,-6,-7,20,22,-2,-3,-4,29,-9,-43,43,45,-41,-8,52,53,-23,-24,-25,-26,-31,-32,-29,-33,-34,64,65,66,67,-15,-12,-17,-18,-39,-10,-13,-11,-14,-30,-19,-20,-21,-22,-16,-42,-27,-40,]),'FLOAT_TYPE':([0,2,3,4,5,16,17,18,20,22,29,43,45,52,53,64,65,66,67,],[11,11,-5,-6,-7,-2,-3,-4,-9,-43,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),'DOUBLE_TYPE':([0,2,3,4,5,16,17,18,20,22,29,43,45,52,53,64,65,66,67,],[12,12,-5,-6,-7,-2,-3,-4,-9,-43,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),'SHORT_TYPE':([0,2,3,4,5,16,17,18,20,22,29,43,45,52,53,64,65,66,67,],[13,13,-5,-6,-7,-2,-3,-4,-9,-43,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),'INT_TYPE':([0,2,3,4,5,16,17,18,20,22,29,43,45,52,53,64,65,66,67,],[14,14,-5,-6,-7,-2,-3,-4,-9,-43,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),'IDENTIFIER_TOKEN':([0,2,3,4,5,8,11,12,13,14,16,17,18,20,21,22,26,27,28,29,32,33,34,43,44,45,52,53,54,55,56,57,61,64,65,66,67,],[15,15,-5,-6,-7,25,-35,-36,-37,-38,-2,-3,-4,-9,42,-43,42,42,42,-8,42,42,42,-33,62,-34,-15,-12,42,42,42,42,42,-10,-13,-11,-14,]),'$end':([1,2,3,4,5,16,17,18,20,22,29,43,45,52,53,64,65,66,67,],[0,-1,-5,-6,-7,-2,-3,-4,-9,-43,-8,-33,-34,-15,-12,-10,-13,-11,-14,]),'=':([6,9,10,15,19,68,],[21,26,27,-29,21,-30,]),'[':([15,25,42,62,],[28,46,28,75,]),'(':([21,26,27,28,32,33,34,41,42,54,55,56,57,61,],[32,32,32,32,32,32,32,61,-28,32,32,32,32,32,]),'-':([21,26,27,28,31,32,33,34,35,36,37,38,39,40,42,47,49,51,54,55,56,57,58,59,60,61,68,69,70,71,72,73,74,77,],[33,33,33,33,55,33,33,33,-23,-24,-25,-26,-31,-32,-29,55,55,55,33,33,33,33,55,-17,-18,33,-30,-19,-20,-21,-22,-16,55,-27,]),'+':([21,26,27,28,31,32,33,34,35,36,37,38,39,40,42,47,49,51,54,55,56,57,58,59,60,61,68,69,70,71,72,73,74,77,],[34,34,34,34,54,34,34,34,-23,-24,-25,-26,-31,-32,-29,54,54,54,34,34,34,34,54,-17,-18,34,-30,-19,-20,-21,-22,-16,54,-27,]),'INTEGRAL_CONSTANT':([21,26,27,28,32,33,34,46,54,55,56,57,61,75,],[39,39,39,39,39,39,39,63,39,39,39,39,39,78,]),'DECIMAL_CONSTANT':([21,26,27,28,32,33,34,54,55,56,57,61,],[40,40,40,40,40,40,40,40,40,40,40,40,]),',':([23,25,62,76,79,],[44,-41,-39,-42,-40,]),'*':([31,35,36,37,38,39,40,42,47,49,51,58,59,60,68,69,70,71,72,73,74,77,],[56,-23,-24,-25,-26,-31,-32,-29,56,56,56,56,-17,-18,-30,-19,-20,-21,-22,-16,56,-27,]),'/':([31,35,36,37,38,39,40,42,47,49,51,58,59,60,68,69,70,71,72,73,74,77,],[57,-23,-24,-25,-26,-31,-32,-29,57,57,57,57,-17,-18,-30,-19,-20,-21,-22,-16,57,-27,]),']':([35,36,37,38,39,40,42,51,59,60,63,68,69,70,71,72,73,77,78,],[-23,-24,-25,-26,-31,-32,-29,68,-17,-18,76,-30,-19,-20,-21,-22,-16,-27,79,]),')':([35,36,37,38,39,40,42,58,59,60,68,69,70,71,72,73,74,77,],[-23,-24,-25,-26,-31,-32,-29,73,-17,-18,-30,-19,-20,-21,-22,-16,77,-27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'empty_statement':([0,2,],[3,16,]),'declaration_statement':([0,2,],[4,17,]),'assignment_statement':([0,2,],[5,18,]),'epsilon':([0,2,],[7,7,]),'declaration_type':([0,2,],[8,8,]),'variable_usage':([0,2,21,26,27,28,32,33,34,54,55,56,57,61,],[9,9,37,37,37,37,37,37,37,37,37,37,37,37,]),'array_usage':([0,2,21,26,27,28,32,33,34,54,55,56,57,61,],[10,10,38,38,38,38,38,38,38,38,38,38,38,38,]),'declaration_list':([8,],[23,]),'arithmetic_expression':([21,26,27,28,32,33,34,54,55,56,57,61,],[31,47,49,51,58,59,60,69,70,71,72,74,]),'numeric_constant':([21,26,27,28,32,33,34,54,55,56,57,61,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'function_call':([21,26,27,28,32,33,34,54,55,56,57,61,],[36,36,36,36,36,36,36,36,36,36,36,36,]),'function_name':([21,26,27,28,32,33,34,54,55,56,57,61,],[41,41,41,41,41,41,41,41,41,41,41,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',17),
  ('statements -> statements empty_statement','statements',2,'p_statements_rec','parser.py',24),
  ('statements -> statements declaration_statement','statements',2,'p_statements_rec','parser.py',25),
  ('statements -> statements assignment_statement','statements',2,'p_statements_rec','parser.py',26),
  ('statements -> empty_statement','statements',1,'p_statements_end','parser.py',32),
  ('statements -> declaration_statement','statements',1,'p_statements_end','parser.py',33),
  ('statements -> assignment_statement','statements',1,'p_statements_end','parser.py',34),
  ('statements -> statements error ;','statements',3,'p_statements_rec_error','parser.py',40),
  ('statements -> error ;','statements',2,'p_statements_end_error','parser.py',50),
  ('assignment_statement -> variable_usage = arithmetic_expression ;','assignment_statement',4,'p_assignment_statement','parser.py',60),
  ('assignment_statement -> array_usage = arithmetic_expression ;','assignment_statement',4,'p_assignment_statement','parser.py',61),
  ('assignment_statement -> error = arithmetic_expression ;','assignment_statement',4,'p_assignment_statement_error','parser.py',67),
  ('assignment_statement -> variable_usage = error ;','assignment_statement',4,'p_assignment_statement_error','parser.py',68),
  ('assignment_statement -> array_usage = error ;','assignment_statement',4,'p_assignment_statement_error','parser.py',69),
  ('assignment_statement -> error = error ;','assignment_statement',4,'p_assignment_statement_error','parser.py',70),
  ('arithmetic_expression -> ( arithmetic_expression )','arithmetic_expression',3,'p_arithmetic_expression_rec_par','parser.py',80),
  ('arithmetic_expression -> - arithmetic_expression','arithmetic_expression',2,'p_arithmetic_expression_rec_una','parser.py',86),
  ('arithmetic_expression -> + arithmetic_expression','arithmetic_expression',2,'p_arithmetic_expression_rec_una','parser.py',87),
  ('arithmetic_expression -> arithmetic_expression + arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression_rec_bin','parser.py',94),
  ('arithmetic_expression -> arithmetic_expression - arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression_rec_bin','parser.py',95),
  ('arithmetic_expression -> arithmetic_expression * arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression_rec_bin','parser.py',96),
  ('arithmetic_expression -> arithmetic_expression / arithmetic_expression','arithmetic_expression',3,'p_arithmetic_expression_rec_bin','parser.py',97),
  ('arithmetic_expression -> numeric_constant','arithmetic_expression',1,'p_arithmetic_expression_end','parser.py',104),
  ('arithmetic_expression -> function_call','arithmetic_expression',1,'p_arithmetic_expression_end','parser.py',105),
  ('arithmetic_expression -> variable_usage','arithmetic_expression',1,'p_arithmetic_expression_end','parser.py',106),
  ('arithmetic_expression -> array_usage','arithmetic_expression',1,'p_arithmetic_expression_end','parser.py',107),
  ('function_call -> function_name ( arithmetic_expression )','function_call',4,'p_function_call','parser.py',113),
  ('function_name -> IDENTIFIER_TOKEN','function_name',1,'p_function_name','parser.py',120),
  ('variable_usage -> IDENTIFIER_TOKEN','variable_usage',1,'p_variable_usage','parser.py',127),
  ('array_usage -> IDENTIFIER_TOKEN [ arithmetic_expression ]','array_usage',4,'p_array_usage','parser.py',147),
  ('numeric_constant -> INTEGRAL_CONSTANT','numeric_constant',1,'p_numeric_integral_constant','parser.py',188),
  ('numeric_constant -> DECIMAL_CONSTANT','numeric_constant',1,'p_numeric_decimal_constant','parser.py',194),
  ('declaration_statement -> declaration_type declaration_list ;','declaration_statement',3,'p_declaration_statement','parser.py',200),
  ('declaration_statement -> declaration_type error ;','declaration_statement',3,'p_declaration_statement_error','parser.py',220),
  ('declaration_type -> FLOAT_TYPE','declaration_type',1,'p_declaration_type','parser.py',230),
  ('declaration_type -> DOUBLE_TYPE','declaration_type',1,'p_declaration_type','parser.py',231),
  ('declaration_type -> SHORT_TYPE','declaration_type',1,'p_declaration_type','parser.py',232),
  ('declaration_type -> INT_TYPE','declaration_type',1,'p_declaration_type','parser.py',233),
  ('declaration_list -> declaration_list , IDENTIFIER_TOKEN','declaration_list',3,'p_declaration_list_variable_declaration_rec','parser.py',239),
  ('declaration_list -> declaration_list , IDENTIFIER_TOKEN [ INTEGRAL_CONSTANT ]','declaration_list',6,'p_declaration_list_array_declaration_rec','parser.py',247),
  ('declaration_list -> IDENTIFIER_TOKEN','declaration_list',1,'p_declaration_list_variable_declaration_end','parser.py',266),
  ('declaration_list -> IDENTIFIER_TOKEN [ INTEGRAL_CONSTANT ]','declaration_list',4,'p_declaration_list_array_declaration_end','parser.py',274),
  ('empty_statement -> epsilon ;','empty_statement',2,'p_empty_statement','parser.py',293),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parser.py',304),
]
